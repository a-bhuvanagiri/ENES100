#include "Arduino.h"
#include "Enes100.h"

int IRPin = A0;  // Analog IR sensor pin
int ledPin = 8;  // LED pin to indicate object detection
int in1 = 6;     // Left motor forward
int in2 = 7;     // Left motor reverse
int in3 = 9;     // Right motor forward
int in4 = 10;    // Right motor reverse

float theta = 0;

const char* teamName = "Sabine's Carpenters";
int teamMarker = 345;

const int targetDistance = 150;  // 150mm

bool navigatedToStart = false;
bool alignedToPayload = false;

void setup() {
    Serial.begin(9600);

    Enes100.begin(teamName, DATA, teamMarker, 1120, 12, 13); // Adjust last 2 pins if needed
    delay(2000); // Give time to localize

    pinMode(IRPin, INPUT);
    pinMode(ledPin, OUTPUT);
    pinMode(in1, OUTPUT);
    pinMode(in2, OUTPUT);
    pinMode(in3, OUTPUT);
    pinMode(in4, OUTPUT);

    Enes100.println("Connected...");
    Serial.println("Setup complete.");
}

void loop() {
    Serial.println("Looping...");

    // Step 1: Navigate to initial position
    if (!navigatedToStart) {
        float yPos = Enes100.getY();
        Serial.print("yPos = ");
        Serial.println(yPos);

        Enes100.print("Initial Y Position: ");
        Enes100.println(yPos);

        if (yPos > 1.0) {
            Enes100.println("Target: (0.55, 0.55)");
            theta = -PI / 2;
        } else {
            Enes100.println("Target: (0.55, 1.45)");
            theta = PI / 2;
        }

        navigatedToStart = true;
        delay(1000);
    }

    // Step 2: Rotate toward payload direction
    if (navigatedToStart && !alignedToPayload) {
        float currentAngle = Enes100.getTheta();
        Serial.print("Current angle: ");
        Serial.println(currentAngle);

        float diff = theta - currentAngle;

        // Normalize angle between -PI and PI
        while (diff > PI) diff -= 2 * PI;
        while (diff < -PI) diff += 2 * PI;

        if (abs(diff) > 0.1) {
            if (diff > 0) {
                Enes100.println("Turning Right");
                turnRight();
            } else {
                Enes100.println("Turning Left");
                turnLeft();
            }
        } else {
            stopMotors();
            alignedToPayload = true;
            Enes100.println("Aligned with payload. Proceeding to IR detection.");
        }

        delay(100);
        return;
    }

    // Step 3: IR detection and approach
    if (alignedToPayload) {
        int distance = getDistanceFromIR();
        Serial.print("IR distance (mm): ");
        Serial.println(distance);

        if (distance > 0 && distance < 300) {
            digitalWrite(ledPin, HIGH);
            Enes100.println("Payload Detected!");

            if (distance > targetDistance) {
                Enes100.println("Approaching payload...");
                moveForward();
            } else {
                Enes100.println("Within 150mm. Stopping.");
                stopMotors();
            }
        } else {
            digitalWrite(ledPin, LOW);
            Enes100.println("No payload in sight.");
            stopMotors();
        }
    }

    delay(100);
}

// ---- Motor helper functions ----
void moveForward() {
    Serial.println("Moving forward");
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
}

void stopMotors() {
    Serial.println("Stopping motors");
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
}

void turnLeft() {
    Serial.println("Turning left");
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
}

void turnRight() {
    Serial.println("Turning right");
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
}

// ---- IR distance conversion ----
int getDistanceFromIR() {
    int rawIR = analogRead(IRPin);
    int distance = map(rawIR, 0, 1023, 200, 0); // You can calibrate this further
    return distance;
}
