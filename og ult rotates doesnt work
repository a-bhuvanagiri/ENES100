int normalSpeed = 200;
int turnSpeed = 150;

void setup() {
  Serial.begin(9600);
  Enes100.begin("Sabine's Carpenters", DATA, 345, 1116, 12, 13);
  Enes100.print("Working as intended.");

  
  // Initialize Enes100 vision system
  Enes100.begin("Sabine's Carpenters", DATA, 11, 1120, 12, 13);
  
  // Configure pins
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);
  pinMode(9, OUTPUT);  // ENA
  pinMode(10, OUTPUT); // ENB

  Enes100.println("OTV initialized. Starting navigation...");

  // Optional: print starting position
  if (Enes100.isVisible()) {
    float currentX = Enes100.getX();
    float currentY = Enes100.getY();
    Enes100.print("Initial position: X=");
    Enes100.print(currentX);
    Enes100.print(", Y=");
    Enes100.print(currentY);
    Enes100.print(", Theta=");
    Enes100.println(Enes100.getTheta());
  } else {
    Enes100.println("ArUco marker not visible. Cannot determine position.");
  }

  // Initial movement test
  forward(200);
  delay(1000);
  stop();
}

void loop() {
  float currentX = Enes100.getX();
  float currentY = Enes100.getY();
  float currentTheta = Enes100.getTheta();

  static unsigned long lastPrintTime = 0;
  if (millis() - lastPrintTime > 1000) {
    Enes100.print("Position: X=");
    Enes100.print(currentX);
    Enes100.print(", Y=");
    Enes100.print(currentY);
    Enes100.print(", Theta=");
    Enes100.println(currentTheta);
    lastPrintTime = millis();
  }

  if (abs(currentX - targetX) < positionTolerance && 
      abs(currentY - targetY) < positionTolerance && 
      !destinationReached) {
    Enes100.println("Destination reached!");
    stop();
    destinationReached = true;
    return;
  }

  float obstacleDistance = getDistance();
  Enes100.print("Obstacle distance: ");
  Enes100.println(obstacleDistance);

  if (obstacleDistance <= 15) {
    handleObstacle(currentX, currentY, currentTheta);
  } else {
    navigateToDestination(currentX, currentY, currentTheta);
  }

  delay(100);
}

float getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(4);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  return (duration / 2.0) / 29.1;
}

void handleObstacle(float x, float y, float theta) {
  Enes100.println("Obstacle detected!");
  stop();
  delay(200);

  if (state == 0) {
    Enes100.println("Obstacle in center path, trying to go far left");
    turnToAngle(-3.14);
    delay(500);
    Enes100.println("Moving to far left boundary");
    while (Enes100.isVisible() && Enes100.getX() > leftBoundary) {
      forward(normalSpeed);
      delay(100);
      if (getDistance() < 10) {
        stop();
        break;
      }
    }
    stop();
    delay(500);
    Enes100.println("Turning to face north (forward)");
    turnToAngle(1.57);
    delay(500);
    state = 1;
  } 
  else if (state == 1) {
    Enes100.println("Left path blocked, trying to go far right");
    turnToAngle(0);
    delay(500);
    Enes100.println("Moving to far right boundary");
    while (Enes100.isVisible() && Enes100.getX() < rightBoundary) {
      forward(normalSpeed);
      delay(100);
      if (getDistance() < 10) {
        stop();
        break;
      }
    }
    stop();
    delay(500);
    Enes100.println("Turning to face north (forward)");
    turnToAngle(1.57);
    delay(500);
    state = 2;
  }
  else {
    Enes100.println("Both far left and far right paths blocked, turning around");
    turnToAngle(-1.57);
    delay(500);
    backward(normalSpeed);
    delay(1000);
    stop();
    state = 0;
  }

  if (getDistance() > 15) {
    Enes100.println("Path now clear, continuing forward");
    forward(normalSpeed);
  }
}

void navigateToDestination(float currentX, float currentY, float currentTheta) {
  float targetAngle = atan2(targetY - currentY, targetX - currentX);
  if (abs(currentTheta - targetAngle) > 0.1) {
    turnToAngle(targetAngle);
    return;
  }
  Enes100.println("Moving toward destination");
  forward(normalSpeed);
}

void turnToAngle(float targetAngle) {
  while (targetAngle > PI) targetAngle -= 2 * PI;
  while (targetAngle < -PI) targetAngle += 2 * PI;

  float currentTheta = Enes100.getTheta();
  float angleDiff = targetAngle - currentTheta;
  while (angleDiff > PI) angleDiff -= 2 * PI;
  while (angleDiff < -PI) angleDiff += 2 * PI;

  Enes100.print("Turning from ");
  Enes100.print(currentTheta);
  Enes100.print(" to ");
  Enes100.println(targetAngle);

  if (angleDiff > 0.05) {
    while (Enes100.isVisible() && abs(Enes100.getTheta() - targetAngle) > 0.1) {
      turnRight(turnSpeed);
      delay(50);
    }
  } else if (angleDiff < -0.05) {
    while (Enes100.isVisible() && abs(Enes100.getTheta() - targetAngle) > 0.1) {
      turnLeft(turnSpeed);
      delay(50);
    }
  }
  stop();
}

void forward(int speed) {
  analogWrite(9, speed);
  analogWrite(10, speed);
  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);
  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

void backward(int speed) {
  analogWrite(9, speed);
  analogWrite(10, speed);
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);
  digitalWrite(motor2pin1, HIGH);
  digitalWrite(motor2pin2, LOW);
}

void turnRight(int speed) {
  analogWrite(9, speed);
  analogWrite(10, speed);
  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);
  digitalWrite(motor2pin1, HIGH);
  digitalWrite(motor2pin2, LOW);
}

void turnLeft(int speed) {
  analogWrite(9, speed);
  analogWrite(10, speed);
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);
  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

void stop() {
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);
  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, LOW);
}

