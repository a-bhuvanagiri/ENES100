#include "Arduino.h"
#include "Enes100.h"




// Motor 1, right motor
const int IN1 = 2;
const int IN2 = 3;
// Motor 2, left motor
const int IN3 = 4;
const int IN4 = 5;
// PWM pins
const int ENA = 255; // right
const int ENB = 255; // left








// Ultrasonic
int trigPin = 6;    // TRIG pin
int echoPin = 7;    // ECHO pin
float duration_us, distance_cm;








// Constants adjusted based on testing
float missionColUp = 0.46;
float missionColDown = 0.25;
float firstCol = 0.85;
float secondCol = 1.70;
float openZone = 3.1;
float distanceThreshold = 30;
float forwardSpeed = 70;
float forwardAdjustPercent = 0.90;
float turnSpeed = 70;




// State dictates what case to run
// Cases are as follows: mission 0, firstCol 1, secondCol 2, openZone 3
int state;




bool temp = true;




void setup() {
    Serial.begin(9600);
    Enes100.begin("Data", DATA, 345, 1116, 12, 13);
  
   
    // Ultrasonic
    // configure the trigger pin to output mode
    pinMode(trigPin, OUTPUT);
    // configure the echo pin to input mode
    pinMode(echoPin, INPUT);








    // Initialize state and start with motors off
    Enes100.println("Starting driving");
    state = 0;
    turnOffMotors();
}




void loop() {


/*
    // Navigation into the destination zone, scuffed
    if(Enes100.getX() > 3.6){
      turnOffMotors();
      return;
    }


    if(Enes100.getY() < 1.3){
      if(Enes100.getTheta() < PI/2-PI/12){
          turnToward(PI/2-PI/12);
      }
      goForwardY(1.4,0);
    }
   
    if(Enes100.getX() < 3.6){
      if(Enes100.getTheta() > PI/12){
        turnToward(PI/12);
      }
      goForwardX(3.6,0);
    }


    return;
    */


    // jitter testing
    /*
    if(temp){
      turnTowardJitter(0);
      temp = false;
    }
     
    return;
    */






    // Do action depending on what state
    // State 0: Mission complete, navigate toward first column
    // State 1: Navigate around first column toward second column
    // State 2: Navigate around second column toward open zone
    // State 3: Navigate toward limbo
    // State 4: Navigation complete
    switch (state){
        case 0:
            turnToward(0);
            goForwardX(firstCol,0);
            state = 1;
            break;
        case 1:
            obstacleNavigation();
            turnToward(0);
            goForwardX(secondCol, 0);
            state = 2;
            break;
        case 2:
            obstacleNavigation();
            turnToward(0);
            goForwardX(openZone,0);
            state = 3;
            break;
        case 3:
            if(Enes100.getY() > 1.7){
                turnToward(-PI/2);
                goForwardY(1.5, -PI/2);
                turnToward(0);
            }
            else if(Enes100.getY() < 1.3){
                turnToward(PI/2);
                goForwardY(1.5, PI/2);
                turnToward(0);
            }
            state = 4;
            break;
    }
}




// Turn to a specified angle
void turnToward(float angle){
    if(Enes100.getTheta() > angle){
        setLeftMotor(turnSpeed);
        setRightMotor(-turnSpeed);
        while(Enes100.getTheta() > angle){
            delay(1);
        }
        turnOffMotors();
    }
    else if(Enes100.getTheta() < angle){
        setLeftMotor(-turnSpeed);
        setRightMotor(turnSpeed);
        while(Enes100.getTheta() < angle){
            delay(1);
        }
        turnOffMotors();
    }
}


// Turning with jitter, adjust hard coded values based on testing
void turnTowardJitter(float angle){
    while(abs(Enes100.getTheta() - angle) > 0.1){
      // If angle big, normal turn
      if(abs(Enes100.getTheta() - angle) > 0.75){
          if(Enes100.getTheta() > angle){
            setLeftMotor(turnSpeed);
            setRightMotor(-turnSpeed);
            while(Enes100.getTheta() > angle){
                delay(1);
            }
            turnOffMotors();
          }
          else if(Enes100.getTheta() < angle){
              setLeftMotor(-turnSpeed);
              setRightMotor(turnSpeed);
              while(Enes100.getTheta() < angle){
                  delay(1);
              }
              turnOffMotors();
          }
      }
      // Otherwise, jitter
      if(Enes100.getTheta() > angle){
            while(Enes100.getTheta() > angle){
                setLeftMotor(turnSpeed);
                setRightMotor(-turnSpeed);
                delay(100);
                turnOffMotors();
                delay(150);
            }
            turnOffMotors();
      }
      else if(Enes100.getTheta() < angle){
            while(Enes100.getTheta() < angle){
                setLeftMotor(-turnSpeed);
                setRightMotor(turnSpeed);
                delay(100);
                turnOffMotors();
                delay(150);
            }
            turnOffMotors();
      }
    }
}


void justJitter(float angle){
  Enes100.println(Enes100.getTheta());
  if(!Enes100.isVisible() || Enes100.getTheta() == -1){
    delay(100);
    justJitter(angle);
    return;
  }
  while(abs(Enes100.getTheta() - angle) > 0.1){
    turnOffMotors();
      if(Enes100.getTheta() > angle){
            while(Enes100.getTheta() > angle){
                while(!Enes100.isVisible()){delay(1);}
                setLeftMotor(turnSpeed);
                setRightMotor(-turnSpeed);
                delay(100);
                turnOffMotors();
                delay(150);
            }
            turnOffMotors();
      }
      else if(Enes100.getTheta() < angle){
            while(Enes100.getTheta() < angle){
                while(!Enes100.isVisible()){delay(1);}
                setLeftMotor(-turnSpeed);
                setRightMotor(turnSpeed);
                delay(100);
                turnOffMotors();
                delay(150);
            }
            turnOffMotors();
      }
  }
}


// Go forward while maintaining a specified angle
void goForward(float angle){
    if(Enes100.getTheta() > angle){
        setLeftMotor(forwardSpeed);
        setRightMotor(forwardSpeed*forwardAdjustPercent);
    }
    else if(Enes100.getTheta() < angle){
        setLeftMotor(forwardSpeed*forwardAdjustPercent);
        setRightMotor(forwardSpeed);
    }
    else{
        setLeftMotor(forwardSpeed);
        setRightMotor(forwardSpeed);
    }
}


void goBackward(float angle){
    if(Enes100.getTheta() > angle){
        setLeftMotor(-forwardSpeed*forwardAdjustPercent);
        setRightMotor(-forwardSpeed);
    }
    else if(Enes100.getTheta() < angle){
        setLeftMotor(-forwardSpeed);
        setRightMotor(-forwardSpeed*forwardAdjustPercent);
    }
    else{
        setLeftMotor(-forwardSpeed);
        setRightMotor(-forwardSpeed);
    }
}




// Go forward until past specified X coordinate while maintaining a specified angle
void goForwardX(float X, float angle){
    if(angle == 0){
        while(Enes100.getX() < X){
            goForward(angle);
            delay(1);
        }
    }
    else if(angle == PI){
        while(Enes100.getX() > X){
            goForward(angle);
            delay(1);
        }
    }
    turnOffMotors();
}




// Go forward until past specified Y coordinate while maintaining a specified angle
void goForwardY(float Y, float angle){
    if(angle == PI/2){
        while(Enes100.getY() < Y){
            goForward(angle);
            delay(1);
        }
    }
    else if(angle == -PI/2){
        while(!Enes100.isVisible() || Enes100.getY() > Y){
            goForward(angle);
            delay(1);
        }
    }
    turnOffMotors();
}


// Movement for getting to mission site, direction 0 is going up, direction 1 is going down
void goForwardYMission(float Y, float X, int direction){
    if(direction == 0){
        while(Enes100.getY() < Y){
            if(Enes100.getX() > X){
                setLeftMotor(forwardSpeed);
                setRightMotor(forwardSpeed*forwardAdjustPercent);
            }
            else if(Enes100.getX() < X){
                setLeftMotor(forwardSpeed*forwardAdjustPercent);
                setRightMotor(forwardSpeed);
            }
            else{
                setLeftMotor(forwardSpeed);
                setRightMotor(forwardSpeed);
            delay(1);
            }
        }
    }
    else if(direction == 1){
        while(Enes100.getY() > Y){
            if(Enes100.getX() < X){
                setLeftMotor(forwardSpeed);
                setRightMotor(forwardSpeed*forwardAdjustPercent);
            }
            else if(Enes100.getX() > X){
                setLeftMotor(forwardSpeed*forwardAdjustPercent);
                setRightMotor(forwardSpeed);
            }
            else{
                setLeftMotor(forwardSpeed);
                setRightMotor(forwardSpeed);
            delay(1);
            }
        }
    }
    turnOffMotors();
}


void goBackwardY(float Y, float angle){
    if(angle == -PI/2){
        while(Enes100.getY() < Y){
            goBackward(angle);
            delay(1);
        }
    }
    else if(angle == PI/2){
        while(Enes100.getY() > Y){
            goBackward(angle);
            delay(1);
        }
    }
    turnOffMotors();
}




// Navigate around obstacles
// Rows are labeled 1, 2, 3 in increasing Y coordinate order
// First check current row of OTV, then row(s) above, then row(s) below
void obstacleNavigation(){
    turnToward(PI/2);


    if(!isObjectDetected()){
        return;
    }
    // Get row
    int row = 0;
    if(Enes100.getY() < 0.75){
        goForwardY(1, PI/2);
        if(!isObjectDetected()){
            return;
        }
        row = 3;
    }
    else if(Enes100.getY() > 1.25){
        goBackwardY(1, PI/2);
        if(!isObjectDetected()){
            return;
        }
        row = 1;
    }
    else{
        goForwardY(1.5, PI/2);
        if(!isObjectDetected()){
            return;
        }
        row = 1;
    }
   
    switch (row){
        case 1:
            goBackwardY(0.5, PI/2);
            if(!isObjectDetected()){
                return;
            }
            return;
        case 3:
            goForwardY(1.5, PI/2);
            if(!isObjectDetected()){
                return;
            }
            return;
    }
}




void setRightMotor(int PWM){
  if(PWM >= 0){
    analogWrite(ENA, PWM);
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
  }
  else{
    analogWrite(ENA, -PWM);
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
  }
}




void setLeftMotor(int PWM){
  if(PWM >= 0){
    analogWrite(ENB, PWM);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
  }
  else{
    analogWrite(ENB, -PWM);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
  }
}




void turnOffMotors(){
  setRightMotor(0);
  setLeftMotor(0);
}




float getDistance(){
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);




  // measure duration of pulse from ECHO pin
  duration_us = pulseIn(echoPin, HIGH);




  // calculate the distance
  distance_cm = 0.017 * duration_us;


  Enes100.println(distance_cm);
 
  return distance_cm;
}




bool isObjectDetected(){
 
  return(getDistance() < distanceThreshold);
}
