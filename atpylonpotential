#include "Enes100.h"
#include <Servo.h>

// Orientation values
float north = 3.14;
float east = 1.57;
float south = 0;
float west = -1.57;

// Tank control
int motor1pin1 = 2;
int motor1pin2 = 3;
int motor2pin1 = 4;
int motor2pin2 = 5;

// Servo and sensors
Servo servo;
int signalPin = 1;
#define hallPin A0

// Logic & timing
bool missionDone = false;
bool servoLowered = false;
bool servoRaised = false;
float ninetyTime = 5000;

void setup() {
  Enes100.begin("Sabine's Carpenters", DATA, 333, 1120, 12, 13);
  Enes100.print("Setup complete.");

  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);

  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(signalPin, INPUT);
  pinMode(hallPin, INPUT);

  servo.attach(11);
  servo.write(90);  // Neutral
  Serial.begin(9600);
}

void loop() {
  if (!missionDone) {
    float y = Enes100.getY();
    float theta = Enes100.getTheta();

    // -------- POSITION A --------
    if (y > 1.2) {
      Enes100.println("In position A.");
      alignToAngle(south);

      moveToPylon();
      runMission();
      missionDone = true;
    }

    // -------- POSITION B --------
    else if (y < 0.8 && y > 0.0) {
      Enes100.println("In position B.");
      alignToAngle(north);

      moveToPylon();
      runMission();
      missionDone = true;
    }
  }

  if (missionDone) {
    drive('b'); // keep moving forward after everything's done
  }
}

// -------- Align to target angle --------
void alignToAngle(float target) {
  while (fabs(Enes100.getTheta() - target) > 0.2) {
    drive((target == north) ? 'l' : 'r');
  }

  Enes100.println("Refining alignment...");
  while (fabs(Enes100.getTheta() - target) > 0.015) {
    drive((target == north) ? 'l' : 'r');
    delay(50);
    drive('s');
    delay(150);
  }
  Enes100.println("Facing correct direction.");
}

// -------- IR Sensor-based Movement to Pylon --------
void moveToPylon() {
  drive('f');
  int a = analogRead(A1);
  while (a > 100) {
    drive('f');
    a = analogRead(A1);
  }

  drive('s');
  delay(200);
  Enes100.println("Pylon reached.");
}

// -------- Mission: Lower rack, read duty cycle, magnetic, raise rack, retreat --------
void runMission() {
  // LOWER the rack
  if (!servoLowered) {
    Enes100.println("Lowering servo...");
    servo.write(95); delay(2000);
    servo.write(90); delay(1000);
    servo.write(85); delay(2000);
    servoLowered = true;
  }

  // DUTY CYCLE
  unsigned long highTime = pulseIn(signalPin, HIGH);
  unsigned long lowTime = pulseIn(signalPin, LOW);
  if (highTime > 0 && lowTime > 0) {
    float dutyCycle = (float)highTime / (highTime + lowTime) * 100.0;
    int roundedDuty;

    if (dutyCycle < 20) roundedDuty = 10;
    else if (dutyCycle < 40) roundedDuty = 30;
    else if (dutyCycle < 60) roundedDuty = 50;
    else if (dutyCycle < 80) roundedDuty = 70;
    else roundedDuty = 90;

    Enes100.mission(0, 100 - roundedDuty);
    Enes100.print("Duty Cycle: ");
    Enes100.print(100 - dutyCycle);
    Enes100.print("%, Rounded: ");
    Enes100.println(100 - roundedDuty);
  } else {
    Enes100.println("Duty cycle reading failed.");
  }

  // MAGNETIC SENSOR
  float sensorValue = analogRead(hallPin);
  Serial.print("Magnetic Sensor Value: ");
  Serial.println(sensorValue);
  Serial.println(sensorValue < 1000 ? "Magnetic field detected!" : "No magnetic field detected.");

  // RAISE the rack
  if (!servoRaised) {
    Enes100.println("Raising servo...");
    servo.write(90); delay(2000);
    servo.write(100); delay(2000);
    servo.write(115); delay(2000);
    servoRaised = true;
  }

  // RETREAT and turn
  drive('b'); delay(5000);
  drive((Enes100.getY() > 1.0) ? 'l' : 'r'); delay(ninetyTime);
  drive('f');
}

// -------- Motor Drive Function --------
void drive(char input) {
  analogWrite(9, 255);
  analogWrite(10, 255);

  switch (input) {
    case 'f':
      digitalWrite(motor1pin1, HIGH); digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, LOW);  digitalWrite(motor2pin2, HIGH);
      break;
    case 'b':
      digitalWrite(motor1pin1, LOW);  digitalWrite(motor1pin2, HIGH);
      digitalWrite(motor2pin1, HIGH); digitalWrite(motor2pin2, LOW);
      break;
    case 'r':
      digitalWrite(motor1pin1, LOW);  digitalWrite(motor1pin2, HIGH);
      digitalWrite(motor2pin1, LOW);  digitalWrite(motor2pin2, HIGH);
      break;
    case 'l':
      digitalWrite(motor1pin1, HIGH); digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, HIGH); digitalWrite(motor2pin2, LOW);
      break;
    case 's':
      digitalWrite(motor1pin1, LOW);  digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, LOW);  digitalWrite(motor2pin2, LOW);
      break;
  }
}
